<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hotkey on Thomas Levesque .NET Blog</title>
    <link>https://blog2.thomaslevesque.net/tags/hotkey/</link>
    <description>Recent content in hotkey on Thomas Levesque .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Feb 2014 21:35:03 +0000</lastBuildDate>
    
	<atom:link href="https://blog2.thomaslevesque.net/tags/hotkey/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[WPF] Declare global hotkeys in XAML with NHotkey</title>
      <link>https://blog2.thomaslevesque.net/2014/02/05/wpf-declare-global-hotkeys-in-xaml-with-nhotkey/</link>
      <pubDate>Wed, 05 Feb 2014 21:35:03 +0000</pubDate>
      
      <guid>https://blog2.thomaslevesque.net/2014/02/05/wpf-declare-global-hotkeys-in-xaml-with-nhotkey/</guid>
      <description>A common requirement for desktop applications is to handle system-wide hotkeys, in order to intercept keyboard shortcuts even when they don’t have focus. Unfortunately, there is no built-in feature in the .NET framework to do it.
Of course, this is not a new issue, and there are quite a few open-source libraries that address it (e.g. VirtualInput). Most of them rely on a global system hook, which allow them to intercept all keystrokes, even the ones you’re not interested in.</description>
    </item>
    
  </channel>
</rss>
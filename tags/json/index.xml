<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSON on Thomas Levesque .NET Blog</title>
    <link>https://blog2.thomaslevesque.net/tags/json/</link>
    <description>Recent content in JSON on Thomas Levesque .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Oct 2019 06:00:08 +0000</lastBuildDate>
    
	<atom:link href="https://blog2.thomaslevesque.net/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Handling type hierarchies in Cosmos DB (part 2)</title>
      <link>https://blog2.thomaslevesque.net/2019/10/15/handling-type-hierarchies-in-cosmos-db-part-2/</link>
      <pubDate>Tue, 15 Oct 2019 06:00:08 +0000</pubDate>
      
      <guid>https://blog2.thomaslevesque.net/2019/10/15/handling-type-hierarchies-in-cosmos-db-part-2/</guid>
      <description>This is the second post in a series of 2:
 Handling type hierarchies in Cosmos DB (part 1) Handling type hierarchies in Cosmos DB (part 2) (this post)  In the previous post, I talked about the difficulty of handling type hierarchies in Cosmos DB, showed that the problem was actually with the JSON serializer, and proposed a solution using JSON.NET&amp;rsquo;s TypeNameHandling feature. In this post, I&amp;rsquo;ll show another approach based on custom converters, and how to integrate the solution with the Cosmos DB .</description>
    </item>
    
    <item>
      <title>Handling type hierarchies in Cosmos DB (part 1)</title>
      <link>https://blog2.thomaslevesque.net/2019/10/14/handling-type-hierarchies-in-cosmos-db-part1/</link>
      <pubDate>Mon, 14 Oct 2019 06:00:31 +0000</pubDate>
      
      <guid>https://blog2.thomaslevesque.net/2019/10/14/handling-type-hierarchies-in-cosmos-db-part1/</guid>
      <description>This is the first post in a series of 2:
 Handling type hierarchies in Cosmos DB (part 1) (this post) Handling type hierarchies in Cosmos DB (part 2)  Azure Cosmos DB is Microsoft&amp;rsquo;s NoSQL cloud database. In Cosmos DB, you store JSON documents in containers. This makes it very easy to model data, because you don&amp;rsquo;t need to split complex objects into multiple tables and use joins like in relational databases.</description>
    </item>
    
    <item>
      <title>Handling multipart requests with JSON and file uploads in ASP.NET Core</title>
      <link>https://blog2.thomaslevesque.net/2018/09/04/handling-multipart-requests-with-json-and-file-uploads-in-asp-net-core/</link>
      <pubDate>Tue, 04 Sep 2018 09:56:23 +0000</pubDate>
      
      <guid>https://blog2.thomaslevesque.net/2018/09/04/handling-multipart-requests-with-json-and-file-uploads-in-asp-net-core/</guid>
      <description>Suppose we&amp;rsquo;re writing an API for a blog. Our &amp;ldquo;create post&amp;rdquo; endpoint should receive the title, body, tags and an image to display at the top of the post. This raises a question: how do we send the image? There are at least 3 options:
 Embed the image bytes as base64 in the JSON payload, e.g.  { &amp;#34;title&amp;#34;: &amp;#34;My first blog post&amp;#34;, &amp;#34;body&amp;#34;: &amp;#34;This is going to be the best blog EVER!</description>
    </item>
    
    <item>
      <title>Uploading data with HttpClient using a &#34;push&#34; model</title>
      <link>https://blog2.thomaslevesque.net/2013/11/30/uploading-data-with-httpclient-using-a-push-model/</link>
      <pubDate>Sat, 30 Nov 2013 21:47:09 +0000</pubDate>
      
      <guid>https://blog2.thomaslevesque.net/2013/11/30/uploading-data-with-httpclient-using-a-push-model/</guid>
      <description>If you have used the HttpWebRequest class to upload data, you know that it uses a “push” model. What I mean is that you call the GetRequestStream method, which opens the connection if necessary, sends the headers, and returns a stream on which you can write directly.
.NET 4.5 introduced the HttpClient class as a new way to communicate over HTTP. It actually relies on HttpWebRequest under the hood, but offers a more convenient and fully asynchronous API.</description>
    </item>
    
  </channel>
</rss>
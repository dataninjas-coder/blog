<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# 4.0 on Thomas Levesque .NET Blog</title>
    <link>https://blog2.thomaslevesque.net/categories/c#-4.0/</link>
    <description>Recent content in C# 4.0 on Thomas Levesque .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Oct 2010 22:42:02 +0000</lastBuildDate>
    
	<atom:link href="https://blog2.thomaslevesque.net/categories/c#-4.0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Entity Framework] Using Include with lambda expressions</title>
      <link>https://blog2.thomaslevesque.net/2010/10/03/entity-framework-using-include-with-lambda-expressions/</link>
      <pubDate>Sun, 03 Oct 2010 22:42:02 +0000</pubDate>
      
      <guid>https://blog2.thomaslevesque.net/2010/10/03/entity-framework-using-include-with-lambda-expressions/</guid>
      <description>I&amp;rsquo;m currently working on a project that uses Entity Framework 4. Even though lazy loading is enabled, I often use the ObjectQuery.Include method to eagerly load associated entities, in order to avoid database roundtrips when I access them:
var query = from ord in db.Orders.Include(&amp;#34;OrderDetails&amp;#34;) where ord.Date &amp;gt;= DateTime.Today select ord; Or if I also want to eagerly load the product:
var query = from ord in db.Orders.Include(&amp;#34;OrderDetails.Product&amp;#34;) where ord.Date &amp;gt;= DateTime.</description>
    </item>
    
    <item>
      <title>[C# 4.0] Implementing a custom dynamic object</title>
      <link>https://blog2.thomaslevesque.net/2009/10/08/c-4-0-implementing-a-custom-dynamic-object/</link>
      <pubDate>Thu, 08 Oct 2009 00:32:07 +0000</pubDate>
      
      <guid>https://blog2.thomaslevesque.net/2009/10/08/c-4-0-implementing-a-custom-dynamic-object/</guid>
      <description>If you&amp;rsquo;ve been following the news about .NET, you probably know that the upcoming version 4.0 of C# introduces a new dynamic type. This type allows to access members of an object which are not statically known (at compile time). These members will be resolved at runtime, thanks to the DLR (Dynamic Language Runtime). This feature makes it easier to manipulate COM objects, or any object which type is not statically known.</description>
    </item>
    
  </channel>
</rss>
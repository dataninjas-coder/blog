<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uncategorized on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/categories/uncategorized/</link>
    <description>Recent content in Uncategorized on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://thomaslevesque.com/categories/uncategorized/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Moving my blog to Hugo</title>
      <link>https://thomaslevesque.com/2020/05/06/moving-my-blog-to-hugo/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2020/05/06/moving-my-blog-to-hugo/</guid>
      <description>If you&#39;re a regular reader of my blog, you probably noticed that the design has changed. In fact, it&#39;s not just the design, it&#39;s just about everything!
My blog used to be hosted on WordPress. It did the job, but honestly, I didn&#39;t really like WordPress. It&#39;s slow, bloated, and the editing and publishing experience is a bit of a mess (or at least, it&#39;s not a good fit for the way I like to work).</description>
    </item>
    
    <item>
      <title>Using the OAuth 2.0 device flow to authenticate users in desktop apps</title>
      <link>https://thomaslevesque.com/2020/03/28/using-the-oauth-2-0-device-flow-to-authenticate-users-in-desktop-apps/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2020/03/28/using-the-oauth-2-0-device-flow-to-authenticate-users-in-desktop-apps/</guid>
      <description>Over the last few years, OpenID Connect has become one of the most common ways to authenticate users in a web application. But if you want to use it in a desktop application, it can be a little awkward…
Authorization code flow OpenID Connect is an authentication layer built on top of OAuth 2.0, which means that you have to use one of the OAuth 2.0 authorization flows. A few years ago, there were basically two possible flows that you could use in a desktop client application to authenticate a user:</description>
    </item>
    
    <item>
      <title>Lazily resolving services to fix circular dependencies in .NET Core</title>
      <link>https://thomaslevesque.com/2020/03/18/lazily-resolving-services-to-fix-circular-dependencies-in-net-core/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2020/03/18/lazily-resolving-services-to-fix-circular-dependencies-in-net-core/</guid>
      <description>The problem with circular dependencies When building an application, good design dictates that you should avoid circular dependencies between your services. A circular dependency is when some components depend on each other, directly or indirectly, e.g. A depends on B which depends on C which depends on A:
It is generally agreed that this should be avoided; I won&#39;t go into the details of the conceptual and theoretical reasons, because there are plenty of resources about it on the web.</description>
    </item>
    
    <item>
      <title>Handling query string parameters with no value in ASP.NET Core</title>
      <link>https://thomaslevesque.com/2020/01/30/handling-query-string-parameters-with-no-value-in-asp-net-core/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2020/01/30/handling-query-string-parameters-with-no-value-in-asp-net-core/</guid>
      <description>Query strings are typically made of a sequence of key-value pairs, like ?foo=hello&amp;amp;bar=world…. However, if you look at RFC 3986, you can see that query strings are very loosely specified. It mentions that
 query components are often used to carry identifying information in the form of &amp;ldquo;key=value&amp;rdquo; pairs
 But it&#39;s just an observation, not a rule (RFCs usually have very specific wording for rules, with words like MUST, SHOULD, etc.</description>
    </item>
    
    <item>
      <title>ASP.NET Core: when environments are not enough, use sub-environments!</title>
      <link>https://thomaslevesque.com/2019/12/20/asp-net-core-when-environments-are-not-enough-use-sub-environments/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2019/12/20/asp-net-core-when-environments-are-not-enough-use-sub-environments/</guid>
      <description>Out of the box, ASP.NET Core has the concept of &amp;ldquo;environments&amp;rdquo;, which allows your app to use different settings based on which environment it&#39;s running in. For instance, you can have Development/Staging/Production environments, each with its own settings file, and a common settings file shared by all environments:
 appsettings.json: global settings appsettings.Development.json: settings specific to the Development environment appsettings.Staging.json: settings specific to the Staging environment appsettings.Production.json: settings specific to the Production environment  With the default configuration, environment-specific settings just override global settings, so you don&#39;t have to specify unchanged settings in every environment if they&#39;re already specified in the global settings file.</description>
    </item>
    
    <item>
      <title>Easy unit testing of null argument validation (C# 8 edition)</title>
      <link>https://thomaslevesque.com/2019/11/19/easy-unit-testing-of-null-argument-validation-c-8-edition/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2019/11/19/easy-unit-testing-of-null-argument-validation-c-8-edition/</guid>
      <description>A few years ago, I blogged about a way to automate unit testing of null argument validation. Its usage looked like this:
[Fact] public void FullOuterJoin_Throws_If_Argument_Is_Null() { var left = Enumerable.Empty&amp;lt;int&amp;gt;(); var right = Enumerable.Empty&amp;lt;int&amp;gt;(); TestHelper.AssertThrowsWhenArgumentNull( () =&amp;gt; left.FullOuterJoin(right, x =&amp;gt; x, y =&amp;gt; y, (k, x, y) =&amp;gt; 0, 0, 0, null), &amp;#34;left&amp;#34;, &amp;#34;right&amp;#34;, &amp;#34;leftKeySelector&amp;#34;, &amp;#34;rightKeySelector&amp;#34;, &amp;#34;resultSelector&amp;#34;); } Basically, for each of the specified parameters, the AssertThrowsWhenArgumentNull method rewrites the lambda expression by replacing the corresponding argument with null, compiles and executes it, and checks that it throws an ArgumentNullException with the appropriate parameter name.</description>
    </item>
    
    <item>
      <title>Using foreach with index in C#</title>
      <link>https://thomaslevesque.com/2019/11/18/using-foreach-with-index-in-c/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2019/11/18/using-foreach-with-index-in-c/</guid>
      <description>Just a quick tip today!
for and foreach loops are among the most useful constructs in a C# developer&#39;s toolbox. To iterate a collection, foreach is, in my opinion, more convenient than for in most cases. It works with all collection types, including those that are not indexable such as IEnumerable&amp;lt;T&amp;gt;, and doesn&#39;t require to access the current element by its index.
But sometimes, you do need the index of the current item; this usually leads to one of these patterns:</description>
    </item>
    
    <item>
      <title>Handling type hierarchies in Cosmos DB (part 2)</title>
      <link>https://thomaslevesque.com/2019/10/15/handling-type-hierarchies-in-cosmos-db-part-2/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2019/10/15/handling-type-hierarchies-in-cosmos-db-part-2/</guid>
      <description>This is the second post in a series of 2:
 Handling type hierarchies in Cosmos DB (part 1) Handling type hierarchies in Cosmos DB (part 2) (this post)  In the previous post, I talked about the difficulty of handling type hierarchies in Cosmos DB, showed that the problem was actually with the JSON serializer, and proposed a solution using JSON.NET&#39;s TypeNameHandling feature. In this post, I&#39;ll show another approach based on custom converters, and how to integrate the solution with the Cosmos DB .</description>
    </item>
    
    <item>
      <title>Handling type hierarchies in Cosmos DB (part 1)</title>
      <link>https://thomaslevesque.com/2019/10/14/handling-type-hierarchies-in-cosmos-db-part1/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2019/10/14/handling-type-hierarchies-in-cosmos-db-part1/</guid>
      <description>This is the first post in a series of 2:
 Handling type hierarchies in Cosmos DB (part 1) (this post) Handling type hierarchies in Cosmos DB (part 2)  Azure Cosmos DB is Microsoft&#39;s NoSQL cloud database. In Cosmos DB, you store JSON documents in containers. This makes it very easy to model data, because you don&#39;t need to split complex objects into multiple tables and use joins like in relational databases.</description>
    </item>
    
    <item>
      <title>Using TypeScript to write Cosmos DB stored procedures with async/await</title>
      <link>https://thomaslevesque.com/2019/07/15/using-typescript-to-write-cosmos-db-stored-procedures-with-async-await/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2019/07/15/using-typescript-to-write-cosmos-db-stored-procedures-with-async-await/</guid>
      <description>Disclaimer: I am by no mean a TypeScript expert. In fact, I know very little about JS, npm, gulp, etc. So it&#39;s entirely possible I said something really stupid in this article, or maybe I missed a much simpler way of doing things. Don&#39;t hesitate to let me know in the comments!
Azure Cosmos DB (formerly known as Azure Document DB) is a NoSQL, multi-model, globally-distributed database hosted in Azure. If you come from relational SQL databases, it&#39;s a very different world.</description>
    </item>
    
    <item>
      <title>Hosting an ASP.NET Core 2 application on a Raspberry Pi</title>
      <link>https://thomaslevesque.com/2018/04/17/hosting-an-asp-net-core-2-application-on-a-raspberry-pi/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2018/04/17/hosting-an-asp-net-core-2-application-on-a-raspberry-pi/</guid>
      <description>As you probably know, .NET Core runs on many platforms: Windows, macOS, and many UNIX/Linux variants, whether on x86/x64 architectures or on ARM. This enables a wide range of interesting scenarios&amp;hellip; For instance, is a very small machine like a Raspberry Pi, which its low performance ARM processor and small amount of RAM (1 GB on my RPi 2 Model B), enough to host an ASP.NET Core web app? Yes it is!</description>
    </item>
    
    <item>
      <title>Writing a GitHub Webhook as an Azure Function</title>
      <link>https://thomaslevesque.com/2018/03/30/writing-a-github-webhook-as-an-azure-function/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2018/03/30/writing-a-github-webhook-as-an-azure-function/</guid>
      <description>I recently experimented with Azure Functions and GitHub apps, and I wanted to share what I learned.
A bit of background As you may already know, I&#39;m one of the maintainers of the FakeItEasy mocking library. As is common in open-source projects, we use a workflow based on feature branches and pull requests. When a change is requested in a PR during code review, we usually make the change as a fixup commit, because it makes it easier to review, and because we like to keep a clean history.</description>
    </item>
    
    <item>
      <title>Understanding the ASP.NET Core middleware pipeline</title>
      <link>https://thomaslevesque.com/2018/03/27/understanding-the-asp-net-core-middleware-pipeline/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2018/03/27/understanding-the-asp-net-core-middleware-pipeline/</guid>
      <description>Middlewhat? The ASP.NET Core architecture features a system of middleware, which are pieces of code that handle requests and responses. Middleware are chained to each other to form a pipeline. Incoming requests are passed through the pipeline, where each middleware has a chance to do something with them before passing them to the next middleware. Outgoing responses are also passed through the pipeline, in reverse order. If this sounds very abstract, the following schema from the official ASP.</description>
    </item>
    
    <item>
      <title>Cleanup Git history to remove unwanted files</title>
      <link>https://thomaslevesque.com/2018/03/06/cleanup-git-history-to-remove-unwanted-files/</link>
      <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2018/03/06/cleanup-git-history-to-remove-unwanted-files/</guid>
      <description>I recently had to work with a Git repository whose modifications needed to be ported to another repo. Unfortunately, the repo had been created without a .gitignore file, so a lot of useless files (bin/obj/packages directories&amp;hellip;) had been commited. This made the history hard to follow, because each commit had hundreds of modified files.
Fortunately, it&#39;s rather easy with Git to cleanup a branch, by recreating the same commits without the files that shouldn&#39;t have been there in the first place.</description>
    </item>
    
    <item>
      <title>Better timeout handling with HttpClient</title>
      <link>https://thomaslevesque.com/2018/02/25/better-timeout-handling-with-httpclient/</link>
      <pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2018/02/25/better-timeout-handling-with-httpclient/</guid>
      <description>The problem If you often use HttpClient to call REST APIs or to transfer files, you may have been annoyed by the way this class handles request timeout. There are two major issues with timeout handling in HttpClient:
 The timeout is defined at the HttpClient level and applies to all requests made with this HttpClient; it would be more convenient to be able to specify a timeout individually for each request.</description>
    </item>
    
    <item>
      <title>Transform T4 templates as part of the build, and pass variables from the project</title>
      <link>https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/</guid>
      <description>T4 (Text Template Transformation Toolkit) is a great tool to generate code at design time; you can, for instance, create POCO classes from database tables, generate repetitive code, etc. In Visual Studio, T4 files (.tt extension) are associated with the TextTemplatingFileGenerator custom tool, which transforms the template to generate an output file every time you save the template. But sometimes it&#39;s not enough, and you want to ensure that the template&#39;s output is regenerated before build.</description>
    </item>
    
    <item>
      <title>Common MSBuild properties and items with Directory.Build.props</title>
      <link>https://thomaslevesque.com/2017/09/18/common-msbuild-properties-and-items-with-directory-build-props/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2017/09/18/common-msbuild-properties-and-items-with-directory-build-props/</guid>
      <description>To be honest, I never really liked MSBuild until recently. The project files generated by Visual Studio were a mess, most of their content was redundant, you had to unload the projects to edit them, it was poorly documented&amp;hellip; But with the advent of .NET Core and the new &amp;ldquo;SDK-style&amp;rdquo; projects, it&#39;s become much, much better.
MSBuild 15 introduced a pretty cool feature: implicit imports (I don&#39;t know if it&#39;s the official name, but I&#39;ll use it anyway).</description>
    </item>
    
    <item>
      <title>Linq performance improvements in .NET Core</title>
      <link>https://thomaslevesque.com/2017/03/29/linq-performance-improvements-in-net-core/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2017/03/29/linq-performance-improvements-in-net-core/</guid>
      <description>By now, you&#39;re probably aware that Microsoft released an open-source and cross-platform version of the .NET platform: .NET Core. This means you can now build and run .NET apps on Linux or macOS. This is pretty cool in itself, but it doesn&#39;t end there: .NET Core also brings a lot of improvements to the Base Class Library.
For instance, Linq has been made faster in .NET Core. I made a little benchmark to compare the performance of some common Linq methods, and the results are quite impressive:</description>
    </item>
    
    <item>
      <title>Easy text parsing in C# with Sprache</title>
      <link>https://thomaslevesque.com/2017/02/23/easy-text-parsing-in-c-with-sprache/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2017/02/23/easy-text-parsing-in-c-with-sprache/</guid>
      <description>A few days ago, I discovered a little gem: Sprache. The name means &amp;ldquo;language&amp;rdquo; in German. It&#39;s a very elegant and easy to use library to create text parsers, using parser combinators, which are a very common technique in functional programming. The theorical concept may seem a bit scary, but as you&#39;ll see in a minute, Sprache makes it very simple.
Text parsing Parsing text is a common task, but it can be tedious and error-prone.</description>
    </item>
    
    <item>
      <title>What&#39;s new in FakeItEasy 3.0.0?</title>
      <link>https://thomaslevesque.com/2017/02/20/whats-new-in-fakeiteasy-3-0-0/</link>
      <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2017/02/20/whats-new-in-fakeiteasy-3-0-0/</guid>
      <description>FakeItEasy is a popular mocking framework for .NET, with an very intuitive and easy-to-use API. For about one year, I&#39;ve been a maintainer of FakeItEasy, along with Adam Ralph and Blair Conrad. It&#39;s been a real pleasure working with them and I had a lot of fun!
Today I&#39;m glad to announce that we&#39;re releasing FakeItEasy 3.0.0, which supports .NET Core and introduces a few useful features.
Let&#39;s see what&#39;s new!</description>
    </item>
    
    <item>
      <title>C# methods in git diff hunk headers</title>
      <link>https://thomaslevesque.com/2017/01/17/c-methods-in-git-diff-hunk-headers/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2017/01/17/c-methods-in-git-diff-hunk-headers/</guid>
      <description>If you use git on the command line, you may have noticed that diff hunks often show the method signature in the hunk header (the line that starts with @@), like this:
diff --git a/Program.cs b/Program.cs index 655a213..5ae1016 100644 --- a/Program.cs +++ b/Program.cs @@ -13,6 +13,7 @@ static void Main(string[] args)  Console.WriteLine(&amp;#34;Hello World!&amp;#34;); Console.WriteLine(&amp;#34;Hello World!&amp;#34;); Console.WriteLine(&amp;#34;Hello World!&amp;#34;); + Console.WriteLine(&amp;#34;blah&amp;#34;);  } This is very useful to know where you are when looking at a diff.</description>
    </item>
    
    <item>
      <title>Fun with the HttpClient pipeline</title>
      <link>https://thomaslevesque.com/2016/12/08/fun-with-the-httpclient-pipeline/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2016/12/08/fun-with-the-httpclient-pipeline/</guid>
      <description>A few years ago, Microsoft introduced the HttpClient class as a modern alternative to HttpWebRequest to make web requests from .NET apps. Not only is this new API much easier to use, cleaner, and asynchronous by design, it&#39;s also easily extensible.
You might have noticed that HttpClient has a constructor that accepts a HttpMessageHandler. What is this handler? It&#39;s an object that accepts a request (HttpRequestMessage) and returns a response (HttpResponseMessage); how it does that is entirely dependent on the implementation.</description>
    </item>
    
    <item>
      <title>Tuple deconstruction in C# 7</title>
      <link>https://thomaslevesque.com/2016/08/23/tuple-deconstruction-in-c-7/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2016/08/23/tuple-deconstruction-in-c-7/</guid>
      <description>Last time on this blog I talked about the new tuple feature of C# 7. In Visual Studio 15 Preview 3, the feature wasn’t quite finished; it lacked 2 important aspects:
  emitting metadata for the names of tuple elements, so that the names are preserved across assemblies
  deconstruction of tuples into separate variables
Well, it looks like the C# language team has been busy during the last month, because both items are now implemented in VS 15 Preview 4, which was released today!</description>
    </item>
    
    <item>
      <title>Tuples in C# 7</title>
      <link>https://thomaslevesque.com/2016/07/25/tuples-in-c-7/</link>
      <pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2016/07/25/tuples-in-c-7/</guid>
      <description>A tuple is an finite ordered list of values, of possibly different types, which is used to bundle related values together without having to create a specific type to hold them.
In .NET 4.0, a set of Tuple classes has been introduced in the framework, which can be used as follows:
private static Tuple&amp;lt;int, double&amp;gt; Tally(IEnumerable&amp;lt;double&amp;gt; values) { int count = 0; double sum = 0.0; foreach (var value in values) { count++; sum += value; } return Tuple.</description>
    </item>
    
    <item>
      <title>Pitfall: using var and async together</title>
      <link>https://thomaslevesque.com/2016/06/21/pitfall-using-var-and-async-together/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2016/06/21/pitfall-using-var-and-async-together/</guid>
      <description>A few days ago at work, I stumbled upon a sneaky bug in our main app. The code looked innocent enough, and at first glance I couldn’t understand what was wrong… The code was similar to the following:
public async Task&amp;lt;bool&amp;gt; BookExistsAsync(int id) { var store = await GetBookStoreAsync(); var book = store.GetBookByIdAsync(id); return book != null; } // For completeness, here are the types and methods used in BookExistsAsync:  private Task&amp;lt;IBookStore&amp;gt; GetBookStoreAsync() { // actual implementation irrelevant  // .</description>
    </item>
    
    <item>
      <title>Test driving C# 7 features in Visual Studio “15” Preview</title>
      <link>https://thomaslevesque.com/2016/04/16/test-driving-c-7-features-in-visual-studio-15-preview/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2016/04/16/test-driving-c-7-features-in-visual-studio-15-preview/</guid>
      <description>About two weeks ago, Microsoft released the first preview of the next version of Visual Studio. You can read about what’s new in the release notes. Some of the new features are really nice (for instance I love the new “lightweight installer”), but the most interesting for me is that it comes with a version of the compiler that includes a few of the features planned for C# 7. Let’s have a closer look at them!</description>
    </item>
    
    <item>
      <title>Using multiple cancellation sources with CreateLinkedTokenSource</title>
      <link>https://thomaslevesque.com/2015/12/31/using-multiple-cancellation-sources-with-createlinkedtokensource/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2015/12/31/using-multiple-cancellation-sources-with-createlinkedtokensource/</guid>
      <description>Async programming in C# used to be hard; thanks to .NET 4’s Task Parallel Library and C# 5’s async/await feature, it has become fairly easy, and as a result, is becoming much more common. At the same time, a standardized approach to cancellation has been introduced : cancellation tokens. The basic idea is that you create a CancellationTokenSource that controls the cancellation, and pass the token it provides to the method that you want to be able to cancel.</description>
    </item>
    
    <item>
      <title>Exception filters in C# 6: their biggest advantage is not what you think</title>
      <link>https://thomaslevesque.com/2015/06/21/exception-filters-in-c-6/</link>
      <pubDate>Sun, 21 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2015/06/21/exception-filters-in-c-6/</guid>
      <description>Exception filters are one of the major new features of C# 6. They take advantage of a CLR feature that was there from the start, but wasn’t used in C# until now. They allow you to specify a condition on a catch block:
static void Main() { try { Foo.DoSomethingThatMightFail(null); } catch (MyException ex) when (ex.Code == 42) { Console.WriteLine(&amp;quot;Error 42 occurred&amp;quot;); } } As you might expect, the catch block will be entered if and only if ex.</description>
    </item>
    
    <item>
      <title>Customizing string interpolation in C# 6</title>
      <link>https://thomaslevesque.com/2015/02/24/customizing-string-interpolation-in-c-6/</link>
      <pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2015/02/24/customizing-string-interpolation-in-c-6/</guid>
      <description>One of the major new features in C# 6 is string interpolation, which allows you to write things like this:
string text = $&amp;quot;{p.Name} was born on {p.DateOfBirth:D}&amp;quot;; A lesser known aspect of this feature is that an interpolated string can be treated either as a String, or as an IFormattable, depending on the context. When it is converted to an IFormattable, it constructs a FormattableString object that implements the interface and exposes:</description>
    </item>
    
    <item>
      <title>Optimize ToArray and ToList by providing the number of elements</title>
      <link>https://thomaslevesque.com/2014/12/07/optimize-toarray-and-tolist-by-providing-the-number-of-elements/</link>
      <pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2014/12/07/optimize-toarray-and-tolist-by-providing-the-number-of-elements/</guid>
      <description>The ToArray and ToList extension methods are convenient ways to eagerly materialize an enumerable sequence (e.g. a Linq query) into an array or a list. However, there’s something that bothers me: both of these methods are very inefficient if they don’t know the number of elements in the sequence (which is almost always the case when you use them on a Linq query). Let’s focus on ToArray for now (ToList has a few differences, but the principle is mostly the same).</description>
    </item>
    
    <item>
      <title>Easy unit testing of null argument validation</title>
      <link>https://thomaslevesque.com/2014/11/02/easy-unit-testing-of-null-argument-validation/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2014/11/02/easy-unit-testing-of-null-argument-validation/</guid>
      <description>When unit testing a method, one of the things to test is argument validation : for instance, ensure that the method throws a ArgumentNullException when a null argument is passed for a parameter that isn’t allowed to be null. Writing this kind of test is very easy, but it’s also a tedious and repetitive task, especially if the method has many parameters… So I wrote a method that automates part of this task: it tries to pass null for each of the specified arguments, and asserts that the method throws an ArgumentNullException.</description>
    </item>
    
    <item>
      <title>A review of NDepend</title>
      <link>https://thomaslevesque.com/2014/07/30/a-review-of-ndepend/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2014/07/30/a-review-of-ndepend/</guid>
      <description>I’ve been hearing quite a lot about NDepend over the last few years, but I had never tried it until recently, when its creator Patrick Smacchia was kind enough to offer me a license.
NDepend is a static analysis tool for .NET that checks your code base against a large set of rules that fall in various categories, such as code quality, object-oriented design, architecture, naming conventions, etc. All of these rules are completely customizable.</description>
    </item>
    
    <item>
      <title>Uploading data with HttpClient using a &#34;push&#34; model</title>
      <link>https://thomaslevesque.com/2013/11/30/uploading-data-with-httpclient-using-a-push-model/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2013/11/30/uploading-data-with-httpclient-using-a-push-model/</guid>
      <description>If you have used the HttpWebRequest class to upload data, you know that it uses a “push” model. What I mean is that you call the GetRequestStream method, which opens the connection if necessary, sends the headers, and returns a stream on which you can write directly.
.NET 4.5 introduced the HttpClient class as a new way to communicate over HTTP. It actually relies on HttpWebRequest under the hood, but offers a more convenient and fully asynchronous API.</description>
    </item>
    
    <item>
      <title>Little known new features in Visual Studio 2012</title>
      <link>https://thomaslevesque.com/2012/06/02/little-known-new-features-in-visual-studio-2012/</link>
      <pubDate>Sat, 02 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2012/06/02/little-known-new-features-in-visual-studio-2012/</guid>
      <description>Visual Studio 2012 RC is out since last week, and even though I didn’t have much time to play with it yet, I think I like it so far. Lots of things have already been said about the design, and about the most important new features, but there are also many smaller and less remarkable improvements that make life easier for us. Since I have seen little or nothing written about those, I thought I would make a list of what I noticed so far.</description>
    </item>
    
  </channel>
</rss>